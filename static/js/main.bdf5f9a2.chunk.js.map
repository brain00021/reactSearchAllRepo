{"version":3,"sources":["assets/img/GitHubLoad.png","assets/img/pzAslBq.png","Title.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Title","className","src","LOGO","alt","width","href","Tip","target","App","state","urlApi","typeApi","urlName","sortApi","repo","searchPage","urlAll","initRepo","localUserName","JSON","parse","window","localStorage","getItem","length","setState","ajaxRepo","addRepo","setItem","stringify","alert","a","async","url","fetch","method","response","json","data","console","log","changeSortApi","sortApiName","changeSearchPage","searchNumber","handleKeyPress","event","key","changeSerach","e","value","this","id","htmlFor","type","onChange","onKeyPress","placeholder","onClick","class","map","record","index","name","created_at","updated_at","svn_url","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdf5f9a2.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GitHubLoad.96973432.png\";","module.exports = __webpack_public_path__ + \"static/media/pzAslBq.6c0363cb.png\";","import React from 'react';\r\nimport LOGO from './assets/img/GitHubLoad.png'\r\nimport Tip from './assets/img/pzAslBq.png'\r\nconst Title = () => (\r\n    <div>\r\n        <h1 className=\"text-center text-white\">\r\n            <img src={LOGO} alt=\"\" width=\"50px\" />\r\n            <br />\r\n            Get GitHub All Repo\r\n        </h1>\r\n        <ul className=\"list-group\">\r\n            <li className=\"list-group-item list-group-item-info\">若不知道自己GitHub名稱，就<a href={Tip}\r\n                    target=\"_black\">請按我</a></li>\r\n            <li className=\"list-group-item\">※輸入完畢，按下Enter即可顯示。(建議複製貼上使用者名稱)</li>\r\n            <li className=\"list-group-item\">※可透過關注保存使用者名稱(暫存瀏覽器)。</li>\r\n            <li className=\"list-group-item\">※點擊欄位標題可排序</li>\r\n            <li className=\"list-group-item list-group-item-warning\">※GitHub有限制查詢次數約60次，請不要過度使用，否則會被封鎖IP位址數分鐘。\r\n            </li>\r\n        </ul>\r\n    </div>\r\n);\r\n\r\nexport default Title;","import React, { Component } from 'react';\n// 安裝所有的檔案\nimport './assets/css/bootstrap.min.css';\nimport './assets/css/all.css';\nimport Title from './Title'\nclass App extends Component {\n  state ={\n    urlApi: 'https://api.github.com/users/',\n    typeApi: '/repos',\n    urlName: 'vuejs',\n    sortApi: '?sort=updated',\n    repo:[],\n    searchPage: '&per_page=5&sha=',\n    urlAll: ''\n  };\n  componentDidMount(){\n    this.initRepo();\n  }\n  initRepo = () => {\n    const localUserName = JSON.parse(window.localStorage.getItem('githubName')) || [];\n    if (localUserName.length !== 0) {\n      this.setState({\n        urlName:localUserName\n      })\n    }\n    this.ajaxRepo();\n  }\n  addRepo = () =>{\n    const {urlName} = this.state;\n    window.localStorage.setItem('githubName', JSON.stringify(urlName));\n    window.alert(`已將目前 ${urlName} 對象加入關注。`);\n  }\n  ajaxRepo= async () => {\n    try {\n      const {urlApi , urlName ,typeApi, sortApi ,searchPage} = this.state\n      const url = urlApi + urlName +  typeApi + sortApi + searchPage;\n      const response = await fetch(url,{ method: 'get' });\n      const data = await response.json();\n      this.setState({\n        repo:data,\n        urlAll: url\n      })\n      console.log(data);\n    } catch (err) {\n      window.alert(`目前出現錯誤：${err}`);\n    }\n  }\n  \n  changeSortApi = (sortApiName) =>{\n    this.setState({\n      sortApi: sortApiName\n    },()=>{\n      this.ajaxRepo();\n    })\n  }\n  changeSearchPage = (searchNumber) =>{\n    this.setState({\n      searchPage: searchNumber\n    },()=>{\n      this.ajaxRepo();\n    })\n  }\n  handleKeyPress= (event) => {\n    if(event.key === 'Enter'){\n      this.ajaxRepo();\n      console.log('enter press here! ')\n    }\n  }\n  changeSerach = (e)=>{\n    this.setState({\n      urlName: e.target.value,\n    })\n  }\n  render() {\n    const {urlName,repo,urlAll} = this.state;\n\n    return (\n      <div id=\"app\" className=\"wrap rounded\">\n        {/* serach block */}\n        <div className=\"container py-5\">\n          <Title />\n          <div className=\"form-group text-center d-flex justify-content-center align-items-center flex-column\">\n            <label htmlFor=\"repoUserName\" className=\"text-white font-weight-bold h3\">輸入使用者名稱</label>\n            <div className=\"form-inline\">\n              <div className=\"form-group\">\n                <input type=\"text\" id=\"repoUserName\" className=\"form-control\" value={urlName} onChange={this.changeSerach} onKeyPress={this.handleKeyPress} placeholder=\"Github UserName\"/>\n              </div>\n              <button className=\"btn btn-outline-primary mx-2\" type=\"button\" onClick={this.ajaxRepo}>查詢</button>\n              <button className=\"btn btn-outline-primary\" type=\"button\" onClick={this.addRepo}>關注</button>\n            </div>\n            <div className=\"text-center text-white mt-2\">目前查詢名稱：{urlName} </div>\n          </div>\n          <div className=\"text-center my-2\">\n            <button class=\"btn btn-outline-primary \" onClick={()=>this.changeSearchPage('&per_page=5&sha=')}>僅查詢5筆</button>\n            <button class=\"btn btn-outline-primary\"  onClick={()=>this.changeSearchPage('&per_page=10&sha=')}>僅查詢10筆</button>\n            <button class=\"btn btn-outline-primary\" onClick={()=>this.changeSearchPage('')}>查詢全部</button>\n          </div>\n          {/*  detail for list */}\n          <div className=\"table-responsive-md\">\n            <table className=\"table table-hover table-bordered table-striped text-center\">\n              <thead className=\"thead-light sticky-top\">\n                <tr>\n                  <th width=\"5%\">Index</th>\n                  {/* 重點寫法 */}\n                  <th width=\"40%\" className=\"sort\" value=\"`?sort=full_name&`\" onClick={()=>this.changeSortApi(`?sort=full_name&`)}>Repo Name</th>\n                  <th width=\"20%\" className=\"sort\" value=\"?sort=created&\" onClick={()=>this.changeSortApi(`?sort=created&`)}>Set Date</th>\n                  <th width=\"30%\" className=\"sort\" value=\"?sort=updated&\" onClick={()=>this.changeSortApi(`?sort=updated&`)}>Last Update</th>\n                  <th width=\"10%\">Link</th>\n                </tr>\n              </thead>\n              <tbody className=\"text-white\">\n              {repo.map((record,index)=>(\n                <tr key={index+1}>\n                  <td>{index + 1}</td>\n                  <td>{record.name}</td>\n                  <td>{record.created_at}</td>\n                  <td>{record.updated_at}</td> \n                  <td><a href={record.svn_url}>快速連結</a></td>\n                </tr>\n              ))}\n              </tbody>\n            </table>\n          </div>\n          <div className=\"text-white text-center\">\n            目前API Url：{urlAll}\n          </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}